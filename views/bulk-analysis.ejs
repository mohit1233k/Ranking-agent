<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bulk Analysis | WebReinvent</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/styles.css" rel="stylesheet">
    <script>
        const SEARCH_CONFIG = {
            maxPages: <%= SEARCH_CONFIG.maxPages %>,
            resultsPerPage: <%= SEARCH_CONFIG.resultsPerPage %>,
            delayBetween: <%= SEARCH_CONFIG.delayBetween %>
        };
    </script>
</head>
<body class="bg-light">
    <!-- Navigation with Tabs -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-chart-line me-2"></i>
                WebReinvent Rank Tracker
            </a>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/">Single Search</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/bulk-analysis">Bulk Analysis</a>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container mt-5">
        <div class="row">
            <!-- Bulk Search Form -->
            <div class="col-md-4">
                <div class="card shadow-lg mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Bulk Keyword Analysis</h5>
                    </div>
                    <div class="card-body">
                        <form id="bulkSearchForm" action="/bulk-search" method="POST">
                            <div class="mb-3">
                                <label class="form-label">Enter Keywords (one per line)</label>
                                <textarea name="keywords" 
                                          class="form-control" 
                                          rows="10" 
                                          placeholder="Laravel development company&#10;Laravel Development Services&#10;Custom Laravel Development"
                                          required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-search me-2"></i>Analyze Keywords
                            </button>
                        </form>

                        <div id="searchStatus" class="d-none">
                            <div class="progress mt-3">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%">0%</div>
                            </div>
                            <div class="mt-2 small text-center" id="statusText">
                                Initializing search...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts and Analysis -->
            <div class="col-md-8">
                <!-- Keywords Summary Table -->
                <div class="card shadow-lg mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Keywords Summary</h5>
                        <div id="refreshButton" class="d-none">
                            <button class="btn btn-light btn-sm" onclick="refreshData()">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Keyword</th>
                                        <th>Current Rank</th>
                                        <th>Best Rank</th>
                                        <th>Trend</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="summaryTableBody"></tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Ranking Trends Chart -->
                <div class="card shadow-lg">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Ranking Trends</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="rankingTrends"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chart = null;
        let searchInProgress = false;
        let keywords = [];
        
        async function refreshData() {
            try {
                const response = await fetch('/api/rankings');
                if (!response.ok) throw new Error('Network response was not ok');
                
                const data = await response.json();
                updateSummaryTable(data);
                updateChart(data);

                // Update status text with timestamp
                const statusText = document.getElementById('statusText');
                statusText.innerHTML = `Last updated: ${new Date().toLocaleTimeString()}`;

                return data;
            } catch (error) {
                console.error('Error refreshing data:', error);
                document.getElementById('statusText').innerHTML = 
                    `<span class="text-danger">Error: ${error.message}. Retrying...</span>`;
                return null;
            }
        }

        async function startBulkSearch(keywords) {
            const maxRetries = 3;
            let retryCount = 0;

            const updateStatus = (message, currentPage = 1) => {
                const statusText = document.getElementById('statusText');
                statusText.innerHTML = `${message}<br>
                    <small class="text-muted">Searching page ${currentPage} of ${SEARCH_CONFIG.maxPages}</small>`;
            };

            try {
                const response = await fetch('/bulk-search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        keywords: keywords.join('\n')
                    })
                });

                if (!response.ok) throw new Error('Search request failed');

                // Start polling with exponential backoff
                let pollDelay = 5000; // Start with 5 seconds
                const maxPollDelay = 30000; // Max 30 seconds

                const pollInterval = setInterval(async () => {
                    const data = await refreshData();
                    if (!data) {
                        retryCount++;
                        if (retryCount >= maxRetries) {
                            clearInterval(pollInterval);
                            updateStatus('Max retries reached. Please try again.', true);
                            return;
                        }
                        pollDelay = Math.min(pollDelay * 1.5, maxPollDelay);
                        return;
                    }

                    // Calculate completion based on keywords with ranks
                    const completedKeywords = keywords.filter(keyword => 
                        data[keyword] && data[keyword].some(result => result.rank)
                    );
                    const completedCount = completedKeywords.length;

                    // Update progress with proper bounds checking
                    updateProgress(completedCount, keywords.length);
                    updateStatus(`Processed ${completedCount} of ${keywords.length} keywords...`);

                    if (completedCount === keywords.length) {
                        clearInterval(pollInterval);
                        searchInProgress = false;
                        document.getElementById('searchStatus').classList.add('d-none');
                        document.querySelector('button[type="submit"]').disabled = false;
                        updateStatus(`All ${keywords.length} keywords processed successfully!`);
                    }
                }, pollDelay);

            } catch (error) {
                console.error('Bulk search error:', error);
                updateStatus(`Search failed: ${error.message}`, true);
                document.querySelector('button[type="submit"]').disabled = false;
            }
        }

        function updateSummaryTable(data) {
            const tableBody = document.getElementById('summaryTableBody');
            tableBody.innerHTML = '';

            keywords.forEach(keyword => {
                const keywordData = data[keyword] || [];
                const latest = keywordData[keywordData.length - 1] || {};
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${keyword}</td>
                    <td>${latest.rank || 'N/A'}</td>
                    <td>${keywordData.length ? Math.min(...keywordData.map(d => d.rank)) : 'N/A'}</td>
                    <td>${getTrendIcon(keywordData)}</td>
                    <td>
                        <span class="badge ${latest.rank ? 'bg-success' : 'bg-warning'}">
                            ${latest.rank ? 'Completed' : 'Pending'}
                        </span>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function getTrendIcon(data) {
            if (data.length < 2) return '➡️';
            const latest = data[data.length - 1].rank;
            const previous = data[data.length - 2].rank;
            return latest < previous ? '🔼' : latest > previous ? '🔽' : '➡️';
        }

        function updateChart(data) {
            if (chart) {
                chart.destroy();
            }

            const ctx = document.getElementById('rankingTrends').getContext('2d');
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: Object.entries(data).map(([keyword, results]) => ({
                        label: keyword,
                        data: results.map(r => ({
                            x: new Date(r.timestamp).toLocaleDateString(),
                            y: r.rank
                        })),
                        fill: false,
                        tension: 0.4,
                        borderWidth: 2
                    }))
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            reverse: true,
                            beginAtZero: false,
                            title: { 
                                display: true, 
                                text: 'Ranking Position' 
                            }
                        }
                    },
                    plugins: {
                        legend: { 
                            position: 'bottom',
                            labels: { boxWidth: 12 }
                        }
                    }
                }
            });
        }

        function updateProgress(current, total) {
            if (!total || total <= 0) return;
            const percent = Math.min(Math.round((current / total) * 100), 100);
            const progressBar = document.querySelector('.progress-bar');
            progressBar.style.width = `${percent}%`;
            progressBar.textContent = `${percent}%`;
        }

        document.getElementById('bulkSearchForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const keywordText = this.querySelector('textarea[name="keywords"]').value;
            keywords = keywordText.split('\n').filter(k => k.trim());
            
            if (keywords.length === 0) {
                alert('Please enter at least one keyword');
                return;
            }

            if (keywords.length > 20) {
                alert('Please limit your search to 20 keywords at a time');
                return;
            }

            searchInProgress = true;
            document.getElementById('searchStatus').classList.remove('d-none');
            document.getElementById('refreshButton').classList.remove('d-none');
            this.querySelector('button[type="submit"]').disabled = true;

            // Initialize table with keywords
            updateSummaryTable({});
            startBulkSearch(keywords);
        });
    </script>
</body>
</html>